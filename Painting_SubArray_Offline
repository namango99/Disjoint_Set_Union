public class PaintingSubArrayOffline {

	//Problem Statement : Given a array having color assigned to every element that is 0 .. Now we are given 
	//Queries .. In each query we are given a range and we have to change the color of that range to c
	//After all the queries Tell what the final array will be formed....
	
	//              ----Answer from next Line........---------
	//We can simply use the DSU
	//We will solve the queries in reverse order since the range will have the last color
	//Every element find_set will give me the next uncolored block
	// For understanding take an example and read code...
	//Each query will take O(log(n)) time hence affordable
	//Nice problem of DSU
	
	public static void make_set(int[] parent,int v) {
		parent[v]=v;
	}
	
	public static int find_set(int[] parent,int v) {
		if(v==parent[v]) {
			return v;
		}
		return parent[v]=find_set(parent,parent[v]);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=8;
		int[] arr=new int[n];
		int[][] queries= {{1,4,2},{2,3,1},{5,6,2},{3,7,3},{1,3,4}};
		int[] parent=new int[n];
		for(int i=0;i<n;i++) {
			make_set(parent,i);
		}
		for(int i=queries.length-1;i>=0;i--) {
			int l=queries[i][0]-1;
			int r=queries[i][1]-1;
			int c=queries[i][2];
			for(int v=find_set(parent,l);v<=r;v=find_set(parent,v)) {
				arr[v]=c;
				parent[v]=v+1;
			}
		}
		for(int i=0;i<n;i++) {
			System.out.print(arr[i]+" ");
		}
	}

}
