import java.util.LinkedList;
import java.util.Stack;

public class OfflineRMQ {

	//Question : We are given all queries before hand and we have to find minimum in those ranges
	
	//This can be solved with segment tree but in that each query would O(log(n)) time but that can also be use
	//online queries... but Arpa's trick is average time constant but the queries need to be known before hand
	
	/*The idea to solve this problem with DSU is the following: We will iterate over the array and 
	 * when we are at the ith element we will answer all queries (L, R) with R == i. 
	 * To do this efficiently we will keep a DSU using the first i elements with the following structure: 
	 * the parent of an element is the next smaller element to the right of it. Then using this structure 
	 * the answer to a query will be the a[find_set(L)], the smallest number to the right of L.
	 * */
	
	public static int[] parent;
	public static int[] rank;
	public static void make_set(int v) {
		parent[v]=v;
		rank[v]=0;
	}
	
	public static int find_set(int v) {
		if(v==parent[v]) {
			return parent[v];
		}
		return parent[v]=find_set(parent[v]);
	}
	
	public static class Query{
		int l,r,index;
		public Query(int l,int r,int index) {
			this.l=l;
			this.r=r;
			this.index=index;
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr= {2,1,2,3,7,6,1,8,6,4,9,1,10};
		int n=arr.length;
		parent=new int[n];
		rank=new int[n];
		for(int i=0;i<n;i++)make_set(i);
		LinkedList<Query>[] right=new LinkedList[n];//stores all lefts whose right is i
		for(int i=0;i<n;i++)right[i]=new LinkedList<Query>();
		int[][] queries= {{1,3},{7,11},{0,7},{2,6},{0,6},{1,11}};
		for(int i=0;i<queries.length;i++) {
			right[queries[i][1]].add(new Query(queries[i][0],queries[i][1],i));
		}
		int[] ans=new int[queries.length];
		Stack<Integer> st=new Stack<Integer>();
		for(int i=0;i<n;i++) {
			while(!st.isEmpty() && arr[st.peek()]>arr[i]) {
				parent[st.pop()]=i;
			}
			st.push(i);
			for(Query x:right[i]) {
				ans[x.index]=arr[find_set(x.l)];
			}
		}
		for(int i=0;i<queries.length;i++) {
			System.out.println(ans[i]);
		}
	}

}
